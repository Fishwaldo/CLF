#!/usr/bin/perl -w
##########################################################################
# $Id: applydate,v 1.4 2002/10/14 16:21:57 kirk Exp $
##########################################################################

use POSIX qw(strftime);

# I plan to add a *lot* more date flexibility at a later time...

my $time = time;

if ( $ENV{'LOGWATCH_DATE_RANGE'} eq 'yesterday') {
   $SearchDate = strftime("%a %b %d", localtime($time-86400));
   $SearchYear = strftime("%Y", localtime($time-86400));
}
elsif ( $ENV{'LOGWATCH_DATE_RANGE'} eq 'today') {
   $SearchDate = strftime("%a %b %d", localtime($time));
   $SearchYear = strftime("%Y", localtime($time));
}
elsif ( $ENV{'LOGWATCH_DATE_RANGE'} eq 'all') {
   $SearchDate = "... ... ..";
   $SearchYear = "....";
}

# Make sure '01' becomes '.1' so it will match ' 1'
$SearchDate =~ s/0(\d)/.$1/;

if ( $ENV{'LOGWATCH_DEBUG'} > 5 ) {
   print STDERR "DEBUG: Inside ApplyDate (up2date)...\n";
   print STDERR "DEBUG: Range: " . $ENV{'LOGWATCH_DATE_RANGE'} . "\n";
   print STDERR "DEBUG: Looking For: " . $SearchDate . " " . $SearchYear . "\n";
}

while (defined($ThisLine = <STDIN>)) {
    if ($ThisLine =~ m/\[$SearchDate ..:..:.. $SearchYear\]/o) {
      print $ThisLine;
    }
}

