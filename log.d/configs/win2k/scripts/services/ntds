#!/usr/bin/perl
##########################################################################
# $Id: cron,v 1.17 2004/06/21 15:07:21 kirk Exp $
##########################################################################
# $Log: cron,v $
# Revision 1.17  2004/06/21 15:07:21  kirk
# - Added check for large user mailboxes
# - Added pop3 and imapd filters
# - Updated clamav support
# - New cisco log filter
# - Tons of updates to existing filters (too many to list!)
#
# Revision 1.16  2004/06/21 14:59:05  kirk
# Added tons of patches from Pawe? Go?aszewski" <blues@ds.pg.gda.pl>
#
# Thanks, as always!
#
# Revision 1.15  2004/06/21 14:24:46  kirk
# RH9 fix from Jindrich Kubec <kubecj@asw.cz
#
# Revision 1.14  2004/02/03 03:36:39  kirk
# Patches from Anssi Kolehmainen <kolean-5.listat@pp.inet.fi>
#
# Revision 1.13  2004/02/03 02:45:26  kirk
# Tons of patches, and new 'oidentd' and 'shaperd' filters from
# Pawe? Go?aszewski" <blues@ds.pg.gda.pl>
#
##########################################################################

########################################################
# This was written and is maintained by:
#    Kirk Bauer <kirk@kaybee.org>
#
# Please send all comments, suggestions, bug reports,
#    etc, to kirk@kaybee.org.
########################################################

$Detail = $ENV{'LOGWATCH_DETAIL_LEVEL'} || 0;

$Startups = 0;
$Reloads = 0;
$MailErrors = 0;

while (defined($ThisLine = <STDIN>)) {
   chomp($ThisLine);
   if ($ThisLine =~ /^\(1507\)/ ) {
	$AskRep++
   } elsif ($ThisLine =~ /^\(1508\)/ ) {
	$RepRep++
   } elsif ($ThisLine =~ /^\(1489\)/ ) {
	$PrepRep++
   } elsif ($ThisLine =~ /^\(1490\)/ ) {
	$FinPrepRep++
   } elsif ($ThisLine =~ /^\(1487\)/ ) {
	$AskInRep++
   } elsif ($ThisLine =~ /^\(1124\)/ ) {
	$RPCFail++
   } elsif ($ThisLine =~ /^\(1585\)/ ) {
	$ChkPDC++
   } elsif ($ThisLine =~ /^\(1085\)/ ) {
	$RepFail++
   } elsif ($ThisLine =~ /^\(1509\)/ ) {
	$NT4Repask++
   } elsif ($ThisLine =~ /^\(1510\)/ ) {
	$NT4Repok++
   } elsif ($ThisLine =~ /^\(1517\)/ ) {
	$AskGroup++
   } elsif ($ThisLine =~ /^\(1518\)/ ) {
	$GetGroup++

   } elsif ($ThisLine =~ /^\(1363|1515|1516|1366|1488|1060|1068|1073|1364|1070|1072|1061\)/ ) {	  
#   } elsif ($ThisLine =~ /^\(8528\): .*: The mailbox for (.*) has exceeded the maximum mailbox size/ ) {
#	$FullBox->{$1}++;	
   } else {
	push @OtherList, "$ThisLine\n";
   }

}

#######################################

if ($AskRep > 0) {
	print "    The Directory Service has been asked for replication state information $AskRep Times\n";
}
if ($RepRep > 0) {
	print "    The Directory Service processed the replication state information request $RepRep Times\n";
}
if ($PrepRep > 0) {
	print "    The Directory Service has been asked for outbound changes $PrepRep Times\n";
}
if ($FinPrepRep > 0) {
	print "    The Directory Service finished gathering outbound changes $FinPrepRep Times\n";
}
if ($AskInRep > 0) {
	print "    The Directory Service has been asked to begin inbound replication $AskInRep Times\n";
}
if ($RPCFail > 0) {
	print "    The directory replication agent (DRA) failed to get a remote procedure call (RPC) binding handle $RPCFail Times\n";
}
if ($ChkPDC > 0) {
	print "    The checkpoint with the PDC was successful. $ChkPDC Times\n";
}

if ($RepFail > 0) {
	print "    The directory replication agent (DRA) couldn't synchronize partition $RepFail Times\n";
}

if ($NT4Repask > 0) {
	print "    The Directory Service has been asked for replication information to support Windows NT 4.0 Domain Controllers $NT4Repask Times\n";
}

if ($NT4Repok > 0) {
	print "    The Directory Service has processed the downlevel replication information request with NT $NT4Repok Times\n";
}

if ($AskGroup > 0) {
	print "    The Directory Service has been asked to get group memberships $AskGroup Times\n";
}

if ($GetGroup > 0) {
	print "    The Directory Service processed the get memberships $GetGroup Times\n";
}


printf "\n";
if (keys %{$FullBox} and ($Detail >= 5)) {
   print "MailBox Full:\n";
   foreach $i (sort {$a cmp $b} keys %{$FullBox}) {
      print "   Username $i $FullBox->{$i} Time(s)\n";
   }
}

#printf "\n";
#if (keys %{$Privs} and ($Detail >= 5)) {
#   print "Privledge Changes:\n";
#   foreach $i (sort {$a cmp $b} keys %{$Privs}) {
#      print "   Username $i:\n";
#      foreach $j (sort {$a cmp $b} keys %{$Privs->{$i}}) {
#         print "      Privledges: $j " . $Privs->{$i}->{$j} . " Time(s)\n";
#      }
##   }
#}

#if ($#PrivsList >= 0) {
#   print "\n**Unmatched Privs Entries**\n";
#   print @PrivsList;
#}

if ($#OtherList >= 0) {
   print "\n**Unmatched Entries**\n";
   print @OtherList;
}

exit(0);

# vi: shiftwidth=3 tabstop=3 et

